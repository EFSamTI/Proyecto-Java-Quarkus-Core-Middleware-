quarkus:
  container-image:
    builder: docker
  datasource:
    "middleware":
      db-kind: postgresql
      username: ${PG_USER}
      password: ${PG_PWD}
      reactive:
        url: ${PG_URL}
  mongodb:
    connection-string: ${MONGO_URL}
    database: ${MONGO_DB}
  # oidc:
  # # oidc-client:
  #   auth-server-url: ${OIDC_SERVER_URL}
  #   client-id: ${OIDC_CLIENT_ID}
  #   credentials:
  #     secret: ${OIDC_CLIENT_SECRET}
  #   tls:
  #     verification: none
  #     # trust-store-file: ${OIDC_TRUST_STORE_FILE}
  #     # trust-store-password: ${OIDC_KEY_STORE_PWD}
  #   connection-delay: 20S
  #   token-path: /protocol/openid-connect/token
  #   introspection-path: /protocol/openid-connect/token/introspect
  # keycloak:
  #   policy-enforcer:
  #     enable: true
  #     enforcement-mode: PERMISSIVE
  #     paths:
  #       "all":
  #         paths: /v1/api/
  #         enforcement-mode: PERMISSIVE
  http:
    host: 0.0.0.0
    port: 8090
    root-path: /v1/api
    # auth:
    #   permission:
    #     authenticated:
    #       paths: /*
    #       policy: authenticated
    cors:
      ~: true
      origins: /.*/
      headers: origin,accept,authorization,content-type,x-requested-with

mp:
  messaging:
    outgoing:
      eurofish:
        connector: smallrye-mqtt
        host: ${MQTT_HOST}
        port: ${MQTT_PORT}
        username: ${MQTT_USER}
        password: ${MQTT_PASSWD}
        auto-generated-client-id: true

micrometer:
  export:
    json:
      enabled: true
      path: /metrics/json
    prometheus:
      enabled: true
      path: /metrics/prometheus

"%prod":
  quarkus:
    http:
      insecure-requests: DISABLED
      ssl-port: 8490
      ssl:
        certificate:
          files: ${CERT_FILE}
          key-files: ${CERT_KEY}